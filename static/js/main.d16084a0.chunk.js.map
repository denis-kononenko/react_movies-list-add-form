{"version":3,"sources":["components/MovieCard/MovieCard.tsx","components/MoviesList/MoviesList.tsx","components/TextField/TextField.tsx","components/NewMovie/NewMovie.tsx","App.tsx","index.tsx"],"names":["MovieCard","movie","className","src","imgUrl","alt","title","description","href","imdbUrl","MoviesList","movies","map","imdbId","TextField","name","value","label","placeholder","required","onChange","validation","useState","Math","random","toFixed","slice","id","errorMessage","setErrorMessage","htmlFor","type","classNames","event","target","onBlur","NewMovie","onAdd","movieInfo","setMovieInfo","imgUrlValidity","setImgUrlValidity","imdbUrlValidity","setImdbUrlValidity","isEmptyField","handleMovieInfoSet","prevInfo","urlValidation","url","setValidity","test","onSubmit","preventDefault","disabled","App","moviesFromServer","setMovies","currentMovies","ReactDOM","render","document","getElementById"],"mappings":"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","file":"static/js/main.d16084a0.chunk.js","sourcesContent":["import React from 'react';\nimport { Movie } from '../../types/Movie';\nimport './MovieCard.scss';\n\ntype Props = {\n  movie: Movie,\n};\n\nexport const MovieCard: React.FC<Props> = ({ movie }) => (\n  <div className=\"card\" data-cy=\"movie-card\">\n    <div className=\"card-image\">\n      <figure className=\"image is-4by3\">\n        <img\n          src={movie.imgUrl}\n          alt=\"Film logo\"\n        />\n      </figure>\n    </div>\n    <div className=\"card-content\">\n      <div className=\"media\">\n        <div className=\"media-left\">\n          <figure className=\"image is-48x48\">\n            <img\n              src=\"images/imdb-logo.jpeg\"\n              alt=\"imdb\"\n            />\n          </figure>\n        </div>\n        <div className=\"media-content\">\n          <p className=\"title is-8\">{movie.title}</p>\n        </div>\n      </div>\n\n      <div className=\"content\">\n        {movie.description}\n        <br />\n        <a href={movie.imdbUrl}>IMDB</a>\n      </div>\n    </div>\n  </div>\n);\n","import React from 'react';\n\nimport './MoviesList.scss';\nimport { MovieCard } from '../MovieCard';\nimport { Movie } from '../../types/Movie';\n\ninterface Props {\n  movies: Movie[];\n}\n\nexport const MoviesList: React.FC<Props> = ({ movies }) => (\n  <div className=\"movies\">\n    {movies.map(movie => (\n      <MovieCard\n        key={movie.imdbId}\n        movie={movie}\n      />\n    ))}\n  </div>\n);\n","import classNames from 'classnames';\nimport React, { useState } from 'react';\n\ntype Props = {\n  name: string,\n  value: string,\n  label?: string,\n  placeholder?: string,\n  required?: boolean,\n  onChange?: (name: string, value: string) => void,\n  validation?: (value: string) => boolean,\n};\n\nfunction getRandomDigits() {\n  return Math.random()\n    .toFixed(16)\n    .slice(2);\n}\n\nexport const TextField: React.FC<Props> = ({\n  name,\n  value,\n  label = name,\n  placeholder = `Enter ${label}`,\n  required = false,\n  onChange = () => {},\n  validation = () => true,\n}) => {\n  // generage a unique id once on component load\n  const [id] = useState(() => `${name}-${getRandomDigits()}`);\n\n  const [errorMessage, setErrorMessage] = useState('');\n\n  const handleChange = (event: React.ChangeEvent<HTMLInputElement>) => {\n    onChange(name, event.target.value);\n    setErrorMessage('');\n  };\n\n  const onBlur = () => {\n    if (required && !value) {\n      setErrorMessage(`${label} is required`);\n    } else if (!validation(value)) {\n      setErrorMessage(`${label} is not valid`);\n    }\n  };\n\n  return (\n    <div className=\"field\">\n      <label className=\"label\" htmlFor={id}>\n        {label}\n      </label>\n\n      <div className=\"control\">\n        <input\n          type=\"text\"\n          id={id}\n          data-cy={`movie-${name}`}\n          className={classNames('input', {\n            'is-danger': errorMessage,\n          })}\n          placeholder={placeholder}\n          value={value}\n          onChange={handleChange}\n          onBlur={onBlur}\n        />\n      </div>\n\n      {errorMessage && (\n        <p className=\"help is-danger\">{errorMessage}</p>\n      )}\n    </div>\n  );\n};\n","import { useState } from 'react';\nimport { TextField } from '../TextField';\nimport { Movie } from '../../types/Movie';\n\ntype Props = {\n  onAdd: (movie: Movie) => void\n};\n\nexport const NewMovie: React.FC<Props> = ({ onAdd }) => {\n  const [movieInfo, setMovieInfo] = useState({\n    title: '',\n    description: '',\n    imgUrl: '',\n    imdbUrl: '',\n    imdbId: '',\n  });\n\n  const [imgUrlValidity, setImgUrlValidity] = useState(false);\n  const [imdbUrlValidity, setImdbUrlValidity] = useState(false);\n\n  const isEmptyField = !movieInfo.title\n    || !movieInfo.imgUrl\n    || !movieInfo.imdbUrl\n    || !movieInfo.imdbId;\n\n  const handleMovieInfoSet = (\n    name: string,\n    value: string,\n  ) => {\n    setMovieInfo(prevInfo => (\n      { ...prevInfo, [name]: value }\n    ));\n  };\n\n  const onSubmit = (event: React.FormEvent) => {\n    event.preventDefault();\n\n    onAdd(movieInfo);\n\n    setMovieInfo({\n      title: '',\n      description: '',\n      imgUrl: '',\n      imdbUrl: '',\n      imdbId: '',\n    });\n  };\n\n  const urlValidation = (\n    url: string,\n    setValidity: (value: boolean) => void,\n  ): boolean => {\n    // eslint-disable-next-line max-len\n    const urlPattern = /^((([A-Za-z]{3,9}:(?:\\/\\/)?)(?:[-;:&=+$,\\w]+@)?[A-Za-z0-9.-]+|(?:www\\.|[-;:&=+$,\\w]+@)[A-Za-z0-9.-]+)((?:\\/[+~%/.\\w-_]*)?\\??(?:[-+=&;%@,.\\w_]*)#?(?:[,.!/\\\\\\w]*))?)$/;\n\n    if (urlPattern.test(url)) {\n      setValidity(true);\n\n      return true;\n    }\n\n    setValidity(false);\n\n    return false;\n  };\n\n  const imgUrlValidation = (url: string) => {\n    return urlValidation(url, setImgUrlValidity);\n  };\n\n  const imdbUrlValidation = (url: string) => {\n    return urlValidation(url, setImdbUrlValidity);\n  };\n\n  return (\n    <form\n      className=\"NewMovie\"\n      onSubmit={onSubmit}\n    >\n      <h2 className=\"title\">Add a movie</h2>\n\n      <TextField\n        name=\"title\"\n        label=\"Title\"\n        value={movieInfo.title}\n        onChange={handleMovieInfoSet}\n        required\n      />\n\n      <TextField\n        name=\"description\"\n        label=\"Description\"\n        value={movieInfo.description}\n        onChange={handleMovieInfoSet}\n      />\n\n      <TextField\n        name=\"imgUrl\"\n        label=\"Image URL\"\n        value={movieInfo.imgUrl}\n        onChange={handleMovieInfoSet}\n        required\n        validation={imgUrlValidation}\n      />\n\n      <TextField\n        name=\"imdbUrl\"\n        label=\"Imdb URL\"\n        value={movieInfo.imdbUrl}\n        onChange={handleMovieInfoSet}\n        required\n        validation={imdbUrlValidation}\n      />\n\n      <TextField\n        name=\"imdbId\"\n        label=\"Imdb ID\"\n        value={movieInfo.imdbId}\n        onChange={handleMovieInfoSet}\n        required\n      />\n\n      <div className=\"field is-grouped\">\n        <div className=\"control\">\n          <button\n            type=\"submit\"\n            data-cy=\"submit-button\"\n            className=\"button is-link\"\n            disabled={isEmptyField || !imgUrlValidity || !imdbUrlValidity}\n          >\n            Add\n          </button>\n        </div>\n      </div>\n    </form>\n  );\n};\n","import './App.scss';\nimport { useState } from 'react';\nimport { MoviesList } from './components/MoviesList';\nimport { NewMovie } from './components/NewMovie';\nimport moviesFromServer from './api/movies.json';\nimport { Movie } from './types/Movie';\n\nexport const App = () => {\n  const [movies, setMovies] = useState(moviesFromServer);\n\n  const addMovie = (movie: Movie) => (\n    setMovies(currentMovies => ([...currentMovies, movie]))\n  );\n\n  return (\n    <div className=\"page\">\n      <div className=\"page-content\">\n        <MoviesList movies={movies} />\n      </div>\n      <div className=\"sidebar\">\n        <NewMovie onAdd={addMovie} />\n      </div>\n    </div>\n  );\n};\n","import ReactDOM from 'react-dom';\nimport 'bulma/css/bulma.css';\nimport { App } from './App';\n\nReactDOM.render(<App />, document.getElementById('root'));\n"],"sourceRoot":""}